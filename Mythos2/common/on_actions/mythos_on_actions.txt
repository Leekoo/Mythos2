# character
on_startup = {
	events = {
		MYTH.56			# Update Virtues/Vices
		SPECIES.15		# Set bloodlines for gods
	}
}

#character
on_yearly_pulse = {
	events = {
		MYTH.34 		# Force Zeus to use seduction
		SPECIES.4		# Species-based infertility
		SPECIES.5		# Mark new event character for race checking
		SPECIES.2		# Doublecheck anyone with an incorrect race
		MAGIC.44		# Check for summoned characters with no living master. Freed if their summoner survives 100 years.
		MYTH.48			# Plaguebearer spreads disease
		SPECIES.7		# Make sure heir modifiers aren't out of date
		MYTH.56			# Update Virtues/Vices
		SPECIES.17		# Handle monthly events
		SPECIES.19		# Lower health from Incapability
	}
	
	random_events = {
		
		# Misc
		1 = MYTH.6		# Search for Solomon
		
		# Religious
		#5 = MYTHMORE.22		# Revive Roman paganism by event
		
	}
}

#character
on_bi_yearly_pulse = {
	events = {
		MYTH.40			# Hellenic becoming a wicked priest
	}
}

#character
on_five_year_pulse = {
	events = {
		MYTH_WoL.196	# Change Zeus' seduction
	}
}

on_decade_pulse = {
	random_events = {
		forged_bloodlines = {
			500 = MBLOODLINE.1 # Herbalist bloodline
			100 = MBLOODLINE.7 # Enchanter bloodline
			300 = MBLOODLINE.17 # Summoner bloodline
			200 = MBLOODLINE.40 # Magic Heritage bloodline
		}
	}
}

# For characters older than AGE_CHILDHOOD_PULSE but not an adult as defined by ADULT_AGE_FEMALE and ADULT_AGE_MALE
on_yearly_childhood_pulse = {
	events = {
		MYTHMORE.46
	}
}
on_focus_selected = {
	events = {
		MYTH_WoL.39				# Select inital specialty
		MYTH_WoL.277			# Automatic specialty
	}
}

# Yearly pulse (six months from on_yearly_pulse) intended for Focus events (only fires for characters with a Focus)
on_focus_pulse = {
	events = {
		SPECIES.5			# Mark new event characters for race checking
		SPECIES.2			# Doublecheck anyone with an incorrect race
		SPECIES.11			# Doublecheck for eligable giants with no subrace
		MYTH.56				# Update Virtues/Vices
		MYTH_WoL.285		# Apprentice experience
	}
	
	random_events = {
		# Magic Focus
		3000 = MYTH_WoL.39	# Select inital specialty
		450 = MYTH_WoL.1	# Summon familiar
		150 = MYTH_WoL.49	# Evade a rival
		30 = MYTH_WoL.57	# Miracle Worker - may need to reduce if too common
		130 = MYTH_WoL.58	# Books of Hermes start
		250 = MYTH_WoL.60	# Increase learning while reading books of hermes
		40 = MYTH_WoL.61	# Pagan conversion while reading books of hermes
		200 = MYTH_WoL.62	# Increase learning - foreign texts
		200 = MYTH_WoL.63	# Increase learning - elements
		400 = MYTH_WoL.64	# Final Alchemy trial
		300 = MYTH_WoL.75	# Alternate final alchemy trial for mages
		100 = MYTH_WoL.78	# Create Aqua Regia
		100 = MYTH_WoL.81	# Lunatic - spin straw into gold
		280 = MYTH_WoL.84	# Illusionary garrison
		280 = MYTH_WoL.85	# Practice shapeshifting
		200 = MYTH_WoL.148	# Weather control
		400 = MYTH_WoL.87	# Herbalism potion for sick courtier
		10 = MYTH_WoL.101	# Create Philosopher's Stone
		200 = MYTH_WoL.112	# Trouble with spells
		120 = MYTH_WoL.113	# Healing of injuries
		100 = MYTH_WoL.115	# Unintelligent characted frustrated.
		100 = MYTH_WoL.116 	# Azoth creation
		250 = MYTH_WoL.122	# Panacea creation
		250 = MYTH_WoL.128	# Tower building
		250 = MYTH_WoL.149	# Find new herb
		#100 = MYTH_WoL.170	# Seidr
		200 = MYTH_WoL.157	# Greater Key of Solomon
		200 = MYTH_WoL.169	# Improve learning
		150 = MYTH_WoL.171	# Lesser Key of Solomon
		100 = MYTH_WoL.179	# Write about Alchemy
		250 = MYTH_WoL.208	# Good summoning time
		500 = MYTH_WoL.212	# Deal with spirits of disease
		450 = MYTH_WoL.213	# Herbalism - potion vs Stressed/depressed
		300 = MYTH_WoL.235	# Herbalism - potion from spare ingredients
		50 = MYTH_WoL.288	# Bad apprentice
		150 = MYTH_WoL.290	# Focused teaching
		150 = MYTH_WoL.292	# Task for apprentice
		200 = MYTH_WoL.297	# Experimenting with potions
	}
}

# character
on_birth = {
	events = {
		SPECIES.5		# Character should already have race_placeholder. Calling to mark to prevent further checking
		#SPECIES.2		# Handle race traits - now called from on_employer_change
		SPECIES.11		# Set subrace on eligable giants
		SPECIES.8		# Update heir modifiers
	}
}

# character
on_adulthood = {
	events = {
		MYTH_WoL.4		# Gain magic education
		SPECIES.5		# Mark for race checking, if needed
		SPECIES.2		# Doublecheck anyone with an incorrect race
		SPECIES.11		# Set subrace on eligable giants
		SPECIES.8		# Update heir modifiers
		MYTH.56			# Update Virtues/Vices
		SPECIES.9		# Remove and re-add God trait
		MYTHMORE.50		# Childhood sweethearts become lovers
	}
}

# Fires when the player changes character
# FROM is the old character, ROOT is the new holder
on_chronicle_owner_change = {
	events = {
		WEREWOLF.95		# Set initial werewolf control
		MYTHMORE.39		# Fix Ruler Designer Immortality
		SPECIES.14		# With Holy Fury, replace Blood of the Gods
	}
}

# Fires when the game starts (not from saves)
on_chronicle_start = {
	events = {
		SPECIES.6		# Mark all premade characters as already being the correct race
		MYTH.56			# Set Virtues/Vices
		MYTHMORE.39		# Fix Ruler Designer Immortality
		SPECIES.14		# With Holy Fury, replace Blood of the Gods
		SPECIES.15		# Set bloodlines for gods
		MBLOODLINE.41		# Set variables for bloodlines
	}
}

#character
on_assassination_disc = {
	events = {
		MYTHMORE.33
		MYTHMORE.34
	}
}

#character. Triggers if someone tries to imprison someone unlanded and fails. Character is exiled to another country
on_avoided_imprison_fled_country = {
	events = {
		MYTHMORE.36
	}
}

#character. Triggers if someone is executed, character not dead yet
on_executed = {
	events = {
		MYTHMORE.33
		MYTHMORE.34
	}
	random_events = {
		1000 = 0		# None
	}
}

# When a pagan ruler forces a prisoner to be his consort
on_forced_consort = {
	events = {
		SPECIES.5		# Make sure race is correct before any children likely to be born
		SPECIES.2		# Doublecheck anyone with an incorrect race
	}
}

# From = Attacker, Root = Defender
on_war_ended_victory = {
	events = {
		MYTH.41			# Remove battle-summoned characters
		MONSTER.25		# Remove inappropriate modifiers
	}
	random_events = {
		100 = 0
	}
}

# From = Attacker, Root = Defender
on_war_ended_invalid = {
	events = {
		MYTH.41			# Remove battle-summoned characters
	}
}

# From = Attacker, Root = Defender
on_war_ended_whitepeace = {
	events = {
		MYTH.41			# Remove battle-summoned characters
	}
}

# From = Attacker, Root = Defender
on_war_ended_defeat = {
	events = {
		MYTH.41			# Remove battle-summoned characters
	}
}

on_death = {
	events = {
		MAGIC.51		# Remove any summoned characters
		SPECIES.8		# Update heir modifiers
		MONSTER.25		# Remove inappropriate modifiers
		BANK.12			# Transfer loans to heir (Debter)
		BANK.25			# Transfer loans to heir (Banker)
		MBLOODLINE.42		# Killer may gain bloodline
	}
}

# Respond to a proposed change of law
on_approve_law = {
	events = {
		SPECIES.7		# Update heir modifiers
	}
}

# Respond to a proposed change of de jure law
on_approve_de_jure_law = {
	events = {
		SPECIES.7		# Update heir modifiers
	}
}

on_elective_gavelkind_succession = {
	events = {
		SPECIES.8		# Update heir modifiers
		MONSTER.25		# Remove inappropriate modifiers
	}
}

# ROOT is the creating character, FROM is the title
on_create_title = {
	events = {
		SPECIES.7		# Update heir modifiers
	}
}

# ROOT is the character, FROM is the title, FROMFROM is the old holder
on_new_holder = {
	events = {
		SPECIES.7		# Update heir modifiers
		MONSTER.25		# Remove inappropriate modifiers
	}
}

# Character converts culture, for whatever reason. ROOT is the character after conversion and the FROM scope has the old culture.
on_character_convert_culture = {
	events = {
		SPECIES.7		# Update heir modifiers
	}
}

on_artifact_inheritance = {
	events = {
		MYTH.54			# Handle Philosopher's Stone
	}
}

# When the religion changes in a county, ROOT is province. FROM has the old religion.
on_county_religion_change = {
	events = {
		MONSTER.26		# Remove inappropriate modifiers
	}
}

# From = Previous leader
#on_society_failed_to_find_new_leader = {
#	events = {
#		MYTHMORE.56		# Assign grandmasters with appropriate traits
#	}
#}

on_employer_change = {
	events = {
		SPECIES.16		# Check species traits if this is a new character
	}
}
